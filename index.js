import dotenv from 'dotenv';
dotenv.config();

import fs from 'fs';
import path from 'path';
import mineflayer from 'mineflayer';
import OpenAI from 'openai';

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const MEMORY_FILE = path.join(process.cwd(), 'botMemory.json');
const CHARACTER_FILE = path.join(process.cwd(), 'character.txt');
const PLAYERNAME = process.env.PLAYERNAME || 'Player';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const MODEL = 'gpt-5'; // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
const PROMPT_TEMPLATE = fs.readFileSync('prompt.txt', 'utf8');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
function log(...args) {
  console.log(new Date().toISOString(), ...args);
}

log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env:', OPENAI_API_KEY ? 'OPENAI_API_KEY ‚Äî —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 'OPENAI_API_KEY ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

// === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é ===
function loadMemory() {
  try {
    if (!fs.existsSync(MEMORY_FILE)) {
      log('–§–∞–π–ª –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –ø–∞–º—è—Ç—å—é.');
      return [];
    }
    const raw = fs.readFileSync(MEMORY_FILE, 'utf8');
    if (!raw || !raw.trim()) {
      log('–§–∞–π–ª –ø–∞–º—è—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–æ–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.');
      return [];
    }
    const parsed = JSON.parse(raw);
    if (!Array.isArray(parsed)) {
      log('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π (–Ω–µ –º–∞—Å—Å–∏–≤) ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.');
      return [];
    }
    return parsed;
  } catch (e) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏:', e.message);
    // –ø–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try {
      const backupName = MEMORY_FILE + `.corrupt-${Date.now()}`;
      fs.renameSync(MEMORY_FILE, backupName);
      log(`–§–∞–π–ª –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ –±—ç–∫–∞–ø: ${backupName}`);
    } catch (er) {
      log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏:', er.message);
    }
    return [];
  }
}

function saveMemory(memoryArray) {
  try {
    fs.writeFileSync(MEMORY_FILE, JSON.stringify(memoryArray, null, 2), 'utf8');
    log('–ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:', memoryArray.length);
  } catch (e) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏:', e.message);
  }
}

function appendMemory(newMemory) {
  if (!newMemory || !String(newMemory).trim()) return;
  const mem = loadMemory();
  mem.push(String(newMemory).trim());
  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 200 –∑–∞–ø–∏—Å–µ–π)
  const MAX_MEM = 200;
  if (mem.length > MAX_MEM) mem.splice(0, mem.length - MAX_MEM);
  saveMemory(mem);
}

function getMemoryString() {
  const mem = loadMemory();
  if (!mem.length) return '';
  return mem.join('\n');
}

function getCharacterDescription() {
  if (!fs.existsSync(CHARACTER_FILE)) return '–û–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
  const raw = fs.readFileSync(CHARACTER_FILE, 'utf8').trim();
  return raw || '–û–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø—É—Å—Ç–æ.';
}

// === –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ ===
function isCodeSafe(code) {
  if (!code || typeof code !== 'string') return false;
  const lowered = code.toLowerCase();
  const forbidden = [
    'fs.', 'path.', 'child_process', 'process.exit', 'eval(', 'require(',
    'http.', 'https.', 'spawn(', 'exec(', 'writefile', 'readfile', 'unlink', 'rmdir', 'mkdir',
    'process.env', 'process.', 'import(', 'await import'
  ];
  return !forbidden.some(bad => lowered.includes(bad));
}

// === –ó–∞–ø—Ä–æ—Å –∫ OpenAI ===
async function askBot(message) {
  const memoryText = getMemoryString();
  const characterText = getCharacterDescription();

  log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞:', message);
  log('üß† –ü–∞–º—è—Ç—å –±–æ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞):', memoryText ? '(–µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)' : '(–ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞)');
  if (memoryText) log(memoryText);
  log('üé≠ –•–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞:\n', characterText);

  const prompt = PROMPT_TEMPLATE
    .replace('{{CHARACTER}}', characterText)
    .replace('{{MEMORY}}', memoryText || '–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞.')
    .replace('@@@', message);

  log('\nüìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –ø—Ä–æ–º–ø—Ç (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–æ–≥–µ):\n', prompt.slice(0, 5000));

  if (!OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.');
  }

  const openai = new OpenAI({ apiKey: OPENAI_API_KEY });
  const response = await openai.responses.create({
    model: MODEL,
    input: prompt
  });

  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ SDK —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
  const text = (response.output_text || response.output?.[0]?.content?.[0]?.text || JSON.stringify(response)).toString().trim();
  log('\nüì¶ –û—Ç–≤–µ—Ç –æ—Ç OpenAI (—Å—ã—Ä–æ–π, –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):\n', text.slice(0, 2000));

  let parsed;
  try {
    parsed = JSON.parse(text);
  } catch (e) {
    throw new Error(`–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON. –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (–æ–±—Ä–µ–∑–∞–Ω): ${text.slice(0, 1000)}`);
  }

  log('\n‚úÖ –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π JSON:\n', parsed);

  if (!parsed.code) throw new Error('–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è "code"');
  if (!isCodeSafe(parsed.code)) throw new Error('–ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');

  if (parsed.memory) {
    appendMemory(parsed.memory);
    log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', parsed.memory);
  }

  return parsed.code;
}

// === Mineflayer –±–æ—Ç ===
const bot = mineflayer.createBot({
  host: 'localhost',
  username: 'Bot'
});

bot.on('spawn', () => {
  log('–ë–æ—Ç –∑–∞—Å–ø–∞–≤–Ω–∏–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
});

bot.on('chat', async (username, message) => {
  if (username === bot.username) return;
  if (username !== PLAYERNAME) return;

  try {
    const code = await askBot(message);
    log('\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–æ–≥–µ):\n', code.slice(0, 2000));
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç bot
    eval(code);
  } catch (err) {
    log('\n‚ùå –û—à–∏–±–∫–∞:', err.message);
    try {
      bot.chat(`–û—à–∏–±–∫–∞: ${err.message}`);
    } catch (e) {
      log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç:', e.message);
    }
  }
});
